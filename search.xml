<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>20200911日常记录</title>
      <link href="/2020/09/11/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-11/"/>
      <url>/2020/09/11/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-11/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-11的日常记录"><a href="#2020-9-11的日常记录" class="headerlink" title="2020/9/11的日常记录"></a>2020/9/11的日常记录</h1><h2 id="日程记录"><a href="#日程记录" class="headerlink" title="日程记录"></a>日程记录</h2><p>六点半醒了，然后起来，吃饭，上课</p><p>九点半，上课回来做算法题，一个小时做了两道题</p><p>十一点多吃饭，看脱口秀</p><p>十二点？？，后来是阅读。</p><p>一点睡，睡到两点半，然后起来阅读，看了一个小时。差不多三四点，然后看软考，也不到一个小时吧，五点吃饭。</p><p>六点半看算法书，看了一个小时。</p><p>七点半跑步，八点十分洗澡，洗衣服。</p><p>八点四十多背单词，四五十分钟，然后看了一点点书。</p><p>现在是九点四十，写日记。</p><p>后面十点可能是回信。然后读读书睡觉。</p><h2 id="今日反思"><a href="#今日反思" class="headerlink" title="今日反思"></a>今日反思</h2><p>今天也做的还不错，暂时没有太多哪里做的不合理的想法，也可能是我忘记了。</p><h2 id="今日日记"><a href="#今日日记" class="headerlink" title="今日日记"></a>今日日记</h2><p>昨天是教师节，晚上十点我跟我的高中老师打了个电话。一年都没打了，打电话之前还在担心会不会尴尬，我一打过去老师就哒哒哒，跟我说个不停，老师还是这么能说。挺好，跟我说了很多东西，考研了、学习了、大学生活了，还问我钱够不够花，不够的话跟他说。这么久了还是让人觉得很亲切。</p><p>昨天晚上十一点我还跟我家里面视频了一下，视频了七十多分钟。挺好</p><p>昨天晚上觉得很累，所以昨天晚上+今天早上适当放空了一下，早上的时候什么都没做，直到上课回来。今天又来信了，我得会要回信。</p><p>今天其实挺满意的，做了很多东西，上午做了算法题，中午下午的时候阅读了一个多小时，然后也做了软考题，晚上的时候看了一个多小时算法书，然后跑步，背单词，再然后就是写日记，回信了。</p><p>对了，今天来的信让我想到了很多东西，然后又忽然想输出点什么，又想起了写微信公众号的想法，我在想能不能每周写一篇文章放上去。再一个想法就是看有没有机会每天试着用英语表达自己的想法，比如用英语聊天，或者用英语输出自己的想法。这是今天刚萌生的两个想法。</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录与反思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020暑假算法学习笔记</title>
      <link href="/2020/09/11/2020%E6%9A%91%E5%81%87%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/09/11/2020%E6%9A%91%E5%81%87%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2020暑假算法学习笔记"><a href="#2020暑假算法学习笔记" class="headerlink" title="2020暑假算法学习笔记"></a>2020暑假算法学习笔记</h1><blockquote><p>这是2020年暑假时期学习算法时的一些笔记，里面记录了各种各样的东西</p></blockquote><h4 id="STL优先队列"><a href="#STL优先队列" class="headerlink" title="STL优先队列"></a>STL优先队列</h4><p>priority_queue&lt;Type, Container, Functional&gt;<br>Type 就是数据类型，Container 就是容器类型（Container必须是用数组实现的容器，比如vector,deque等等，但不能用 list。STL里面默认用的是vector），Functional 就是比较的方式。</p><p>当需要用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，默认是大顶堆。</p><pre><code class="c++">//升序队列，小顶堆priority_queue &lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;//降序队列，大顶堆priority_queue &lt;int,vector&lt;int&gt;,less&lt;int&gt; &gt;q;</code></pre><h4 id="关于lower-bound-和upper-bound-的常见用法"><a href="#关于lower-bound-和upper-bound-的常见用法" class="headerlink" title="关于lower_bound( )和upper_bound( )的常见用法"></a>关于lower_bound( )和upper_bound( )的常见用法</h4><p>lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>在从大到小的排序数组中，重载lower_bound()和upper_bound()</p><p>lower_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>upper_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><h4 id="greater-lt-int-gt-和less-lt-int-gt"><a href="#greater-lt-int-gt-和less-lt-int-gt" class="headerlink" title="greater&lt; int &gt;和less&lt; int &gt;"></a>greater&lt; int &gt;和less&lt; int &gt;</h4><pre><code class="c++">template&lt;class _Ty = void&gt;    struct less    {    // functor for operator&lt;    typedef _Ty first_argument_type;    typedef _Ty second_argument_type;    typedef bool result_type;    constexpr bool operator()(const _Ty&amp; _Left, const _Ty&amp; _Right) const        {    // apply operator&lt; to operands        return (_Left &lt; _Right);        }    };</code></pre><pre><code class="c++">template&lt;class _Ty = void&gt;    struct greater    {    // functor for operator&gt;    typedef _Ty first_argument_type;    typedef _Ty second_argument_type;    typedef bool result_type;    constexpr bool operator()(const _Ty&amp; _Left, const _Ty&amp; _Right) const        {    // apply operator&gt; to operands        return (_Left &gt; _Right);        }    };</code></pre><h4 id="Dilworth定理"><a href="#Dilworth定理" class="headerlink" title="Dilworth定理"></a>Dilworth定理</h4><p><strong>偏序集上最小链划分中链的数量等于其反链长度的最大值。</strong></p><h5 id="偏序"><a href="#偏序" class="headerlink" title="偏序"></a>偏序</h5><p>设R是集合<em>A</em>上的一个二元关系，若R（如≤）满足：</p><p>Ⅰ 自反性：对任意<em>x</em>∈<em>A</em>，有<em>x</em>R<em>x</em>；</p><p>Ⅱ 反对称性（即反对称关系）：对任意<em>x</em>,<em>y</em>∈<em>A</em>，若<em>x</em>R<em>y</em>，且<em>y</em>R<em>x</em>，则<em>x</em>=<em>y</em>；</p><p>Ⅲ 传递性：对任意<em>x</em>, <em>y</em>,<em>z</em>∈<em>A</em>，若<em>x</em>R<em>y</em>，且<em>y</em>R<em>z</em>，则<em>x</em>R<em>z</em>。</p><p>则称R为<em>A</em>上的偏序关系，通常记作≼。</p><h5 id="全序集"><a href="#全序集" class="headerlink" title="全序集"></a>全序集</h5><p>设$\leq$为非空集合A上的一个偏序关系，若对于集合∀a,b∈B，都有a≤b或b≤a（即元素两两可比），就称(B,≤)为一个全序集。</p><h5 id="反链"><a href="#反链" class="headerlink" title="反链"></a>反链</h5><p>若偏序集(B,≤)中的元素两两不可比，则称B为反链。</p><h4 id="SPFA伪代码"><a href="#SPFA伪代码" class="headerlink" title="SPFA伪代码"></a>SPFA伪代码</h4><pre><code class="c++"> procedure Shortest-Path-Faster-Algorithm(G, s)  1    for each vertex v ≠ s in V(G)  2        d(v) := ∞  3    d(s) := 0  4    offer s into Q  5    while Q is not empty  6        u := poll Q  7        for each edge (u, v) in E(G)  8            if d(u) + w(u, v) &lt; d(v) then  9                d(v) := d(u) + w(u, v) 10                if v is not in Q then 11                    offer v into Q</code></pre><h4 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h4><h5 id="int-快读"><a href="#int-快读" class="headerlink" title="int 快读"></a>int 快读</h5><pre><code>inline int readi(){    char ch=getchar();    int s=0,w=1;    while(ch&lt;&#39;0&#39; || ch&gt;&#39;9&#39;){        if(ch==&#39;-&#39;) w=-1;        ch=getchar();    }    while(ch&gt;=&#39;0&#39; &amp;&amp; ch&lt;=&#39;9&#39;){        s=s*10+ch-&#39;0&#39;;    //s=(s&lt;&lt;3)+(s&lt;&lt;1)+(ch^48);        ch=getchar();    }    return s*w;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大整数加减法C++代码</title>
      <link href="/2020/09/11/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/"/>
      <url>/2020/09/11/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="大整数加减法C-代码"><a href="#大整数加减法C-代码" class="headerlink" title="大整数加减法C++代码"></a>大整数加减法C++代码</h1><blockquote><p> 因为写一次这个东西要花点时间，所以粘在这里，下次可以直接站粘过去用。偷个懒，=.= 懒癌患者</p></blockquote><pre><code class="c++">/** * 大整数加法（如99999999999999999+999999999999999) * 字符串用string存储 * 参数s1,s2为得求和的两个大整数 * 返回值为一个string类型字符串，其值为求和结果 */string add(string s1,string s2){    int len1=s1.length();    int len2=s2.length();    string s=&quot;&quot;;    int c=0;    int i=len1-1,j=len2-1;    while(i&gt;=0 &amp;&amp; j&gt;=0){        int cal=s1[i--]-&#39;0&#39;+s2[j--]-&#39;0&#39;+c;        c=cal/10;        s=char(cal%10+&#39;0&#39;)+s;    }    while(i&gt;=0){        int cal=s1[i--]-&#39;0&#39;+c;        c=cal/10;        s=char(cal%10+&#39;0&#39;)+s;    }    while(j&gt;=0){        int cal=s2[j--]-&#39;0&#39;+c;        c=cal/10;        s=char(cal%10+&#39;0&#39;)+s;    }    if(c){        s=char(c+&#39;0&#39;)+s;    }    return s;}/** * 大整数乘一个一位数（如999999999999999*4） * 大整数、返回值用string,一位数用char存储 * 参数str为大整数，p为一位数（char类型） * 返回值为乘积结果string类型 */string muti(string str,char p){    string s=&quot;&quot;;    int len=str.length();    int c=0;    int i=len-1;    while(i&gt;=0){        int cal=(str[i--]-&#39;0&#39;)*(p-&#39;0&#39;)+c;        c=cal/10;        s=char(cal%10+&#39;0&#39;)+s;    }    if(c){        s=char(c+&#39;0&#39;)+s;    }    return s;}/** * 大整数乘法(如99999999999999999*99999999999999999) * 参数为两个非负大整数，类型为string * 返回值为大整数乘积结果，类型为string * 注：需要调用上面的muti(string,string)函数 */string mutiple(string s1,string s2){    if(s1==&quot;0&quot; || s2==&quot;0&quot;){        return &quot;0&quot;;    }    int len=s2.length();    string ans=&quot;&quot;;    string str=&quot;&quot;;    for(int i=len-1;i&gt;=0;i--){        ans=add(ans,muti(s1,s2[i])+str);        str+=&#39;0&#39;;    }    return ans;}/** * 整数转字符串 * 参数为一非负整数，可以修改为long long * 返回值为该整数对应的字符串 * 注：手打没有运行过，应该没问题 */string change(int num){    if(num==0)        return &quot;0&quot;;    string s=&quot;&quot;;    while(num){        s=char(num%10+&#39;0&#39;)+s;        num/=10;    }    return s;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用的算法代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20200910日常记录</title>
      <link href="/2020/09/10/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-10/"/>
      <url>/2020/09/10/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-10/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-10的日常记录"><a href="#2020-9-10的日常记录" class="headerlink" title="2020/9/10的日常记录"></a>2020/9/10的日常记录</h1><h2 id="日程记录"><a href="#日程记录" class="headerlink" title="日程记录"></a>日程记录</h2><p>五点醒，努力睡着……</p><p>五点半，睡不着看会书</p><p>五点五十多开始<strong>背单词</strong>，到六点半，然后出去<strong>滑滑板</strong>，滑了半个小时，吃饭上课</p><p>上午上完课后回来做了两道<strong>算法题</strong>，四十分钟，后来又钻了一道算法题，到十一半了都，然后吃饭，看脱口秀。</p><p>吃完饭看了半小时<strong>算法书</strong>，睡觉</p><p>下午做实验，回来开始试着看能不能<strong>打1寸照片</strong>，弄到五点半吃饭</p><p>吃完饭，给那个人<strong>回信</strong>，边回边发呆，八点散步，回来还是继续回信……到九点</p><p>现在九点半，写日记，然后一会就上床休息看书了。</p><h2 id="今日反思"><a href="#今日反思" class="headerlink" title="今日反思"></a>今日反思</h2><p>今天觉得很累，但在预期之内。今天有一项任务没有做，就是做软考题。今天就算是休息了，明天必须得做一点。</p><p>最近情绪开始有点松懈了，有时间的话要反思一下，是哪里的问题，接下来该怎么做。</p><h2 id="今日日记"><a href="#今日日记" class="headerlink" title="今日日记"></a>今日日记</h2><p>现在我觉得很累，今天有趣的事就是上午的时间都用来做三道算法题，下午终于尝试了打1寸照片，自从软考报名搞照片就有了这个想法，发现我其实可以打1寸照片的，但一直没开始尝试，今天终于做了一下，效果还不错。</p><p>晚上回了那封信，想到了什么就写了什么，总算也算是回了，我还给她附加了一本电子书《见识》，我觉得这本书很不错。</p><p>我觉得很累，不想写了，今天就到这里吧。</p><p>OK,再记录一件事，刚才我在提交文章的时候居然乱码了，在本地服务器打开没什么问题，提交到github 再打开居然乱码了！后来我又重新生成了一遍，又重新发布上去，好了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录与反思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20200909日常记录</title>
      <link href="/2020/09/09/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-9/"/>
      <url>/2020/09/09/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-9/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-9的日常记录"><a href="#2020-9-9的日常记录" class="headerlink" title="2020/9/9的日常记录"></a>2020/9/9的日常记录</h1><h2 id="日程记录"><a href="#日程记录" class="headerlink" title="日程记录"></a>日程记录</h2><p>五点半醒，起床、洗漱</p><p>五点四十多，复习单词，2list，到六点半，用时四五十分钟</p><p>六点半，出去滑滑板，到七点，用时半小时</p><p>七点，吃饭，发呆？，到七点半，用时半小时</p><p>七点半，去上课，至九点半</p><p>九点五十，做算法题，1道，两个番茄</p><p>十一点多，去吃饭，看脱口秀，至十二点</p><p>十二点，看数字内容安全，半小时</p><p>十二点半，看算法书，半小时</p><p>一点半，睡觉，睡到两点四十，一个多小时</p><p>两点五十，看数字内容安全，一小时</p><p>四点，做软考题，做笔记，至五点二十，一个多小时，然后吃饭一小时</p><p>六点半，算法1道，半小时</p><p>七点，算法书半小时，阅读半小时</p><p>八点，跑步半小时，洗澡半小时</p><p>九点，看数字内容安全技术，一个多小时</p><p>十点十分，回复消息，写日记</p><p>计划十一点再读半小时书才能完成今天的读书计划。</p><h2 id="今日反思"><a href="#今日反思" class="headerlink" title="今日反思"></a>今日反思</h2><p>首先今天做了很多事，今天表现的很不错！I’m proud of you! 我为自己而感到高兴，今天觉得很充实，这是很不错的感觉。</p><p>出现的问题是，时间分配还是感觉稍微有点支离破碎的感觉，比如算法题上午做一道、下午又做一道，以及算法书上午没看完，结果下午还得再看。不过维持今天这样的状态保持下去也是很不错的。</p><p>今天做的很不错，希望可以继续保持下去！</p><h2 id="今日日记"><a href="#今日日记" class="headerlink" title="今日日记"></a>今日日记</h2><p>哇咔咔！</p><p>今天做了很多事，比如早上吃饭前背了单词，滑了滑板，（在别人都还在睡觉的时候），我比别人多出了一个多小时的时间。</p><p>说到滑滑板，我今天早上狠狠的摔了一跤，啧啧，真疼。磕到我的膝盖、胳膊肘、还有我P股两边的骨头上，疼的我站不起来，磕出了好多血，把皮给磨破了，那个P股骨头两边内出血，里面有很多血的小红点，膝盖也疼，但我到现在居然还没去看看它。Go on, 当时疼的我站不起来了，我就用滑板撑着，走到路边做了一会儿。这种跌，刚开始特别疼，不动它休息一下就缓过来了，然后我就在那路边坐着休息了一下。然后慢慢的感觉还行，没那么疼了，然后又滑了二十多分钟。</p><p>我觉得我就是打不死的小强，虽然摔倒很痛，但是没什么大碍还是继续滑，明天不下雨起的早的话我还是打算去滑，每天早上滑几十分钟。人可以被毁灭，但不能被打败。人的肉体只是皮囊，人的灵魂向往自由，但皮囊会阻碍灵魂，我不希望我的皮囊阻碍了我的灵魂。</p><p>本来以为没什么事，中午睡觉的时候悲催了。只能以一个姿势一直躺着，有点难受。OK，这就是关于滑滑板摔跤的事情。</p><p>然后今天上午上课了！之前到学校后学校一直没有给安排课程，今天终于上课了。今天老师说，因为这几天一直上这门课，到时候正式开学就考期中考试，该期中考试的时间的时候就考期末考试。啧啧。</p><p>今天上课的时候我还发现那个tell好友我发邮件了，她说她也开学了，所以比较忙，没看我说的那些书，也没回我。这次她问我关于性格和社交的问题，关键是她没有说她有什么问题，只说她在这方面有困惑，……。好吧，关于性格和社交方面我也不怎么适合谈这些，虽然我读过一些书并且也可以告诉点她什么东西，不过还是得好好斟酌一下。今天没有时间回信，改天再回吧。</p><p>然后上午我做了一道题，中午看了算法书，终于用点突破了！这是一个好现象，之前一直卡在BIT出不来，今天终于看懂了。明天可以继续往下走了。</p><p>下午睡醒后我读数字内容安全书，1 h，做软考题，一个多小时，而且做了笔记，发到了博客上面，终于发了一个知识技术的文章了！</p><p>晚上的时候把剩余的BIT看完，然后读书，锻炼半小时，然后又是看了一小时的数字内容安全终于把前两章看完咯 ！明天早上的时候看第三章。</p><p>很不错吧，今天的感想也挺多的，一会儿再看一会儿书就睡觉。今天应该还有好多事没有记录下来，但是我忘记了，就这样吧。</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录与反思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>运算器与控制器做题笔记</title>
      <link href="/2020/09/09/%E8%BD%AF%E8%80%83%E8%BF%90%E7%AE%97%E5%99%A8%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%99%A8%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/09/09/%E8%BD%AF%E8%80%83%E8%BF%90%E7%AE%97%E5%99%A8%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%99%A8%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="软考运算器与控制器做题笔记"><a href="#软考运算器与控制器做题笔记" class="headerlink" title="软考运算器与控制器做题笔记"></a>软考运算器与控制器做题笔记</h1><blockquote><p> <em>生活不易，猪猪叹息！</em></p></blockquote><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p><strong>指令字</strong>（简称指令）即表示一条指令的机器字。</p><p><strong>指令格式</strong>则是指令字用二进制代码表示的结构形式，由<strong>操作码</strong>字段和<strong>地址码</strong>字段组成。</p><p><strong>操作码</strong>字段表征指令的<strong>操作特性与功能</strong>；<strong>地址码</strong>字段通常指定参与操作的<strong>操作数的地址</strong>。</p><p>操作码和地址码都应存入<strong>指令寄存器</strong>。</p><p>计算机执行指令时，从<strong>内存</strong>中取出的一条<strong>指令</strong>经数据总线送往<strong>指令寄存器</strong>中。指令的<strong>操作码</strong>被送到<strong>指令译码器</strong>中译码，<strong>地址码</strong>则送到<strong>地址形成部件</strong>。地址形成部件根据指令特征将地址码形成<strong>有效地址</strong>，送往<strong>主存的地址寄存器</strong>。对于转移指令，要将形成的有效转移地址送往程序计数器中，实现程序的转移。<strong>操作控制器</strong>根据指令译码器对于指令操作码的<strong>译码</strong>，产生出实现指令功能所需要的全部动作的<strong>控制信号</strong>。这些控制信号按照一定的时间顺序发往各个部件，控制各部件的动作。</p><h3 id="程序计数器PC"><a href="#程序计数器PC" class="headerlink" title="程序计数器PC"></a>程序计数器PC</h3><p>程序计数器是用于<strong>存放下一条指令所在单元的地址</strong>的地方。</p><p>可以通过call, jmp 等跳转指令间接改变，可以用Move，push等读出其值，但是不可写。（<strong>可访问</strong>）</p><p>当执行一条指令时，首先需要根据<strong>PC</strong>中存放的<strong>指令地址</strong>，将<strong>指令</strong>由内存取到<strong>指令寄存器</strong>中，此过程称为“取指令”。与此同时，PC中的地址或自动加1或由转移指针给出下一条指令的地址。此后经过分析指令，执行指令。完成第一条指令的执行，而后根据PC取出第二条指令的地址，如此循环，执行每一条指令。</p><h3 id="指令寄存器IR"><a href="#指令寄存器IR" class="headerlink" title="指令寄存器IR"></a>指令寄存器IR</h3><p>指令寄存器，用于暂存当前正在执行的<strong>指令</strong>，<strong>对用户完全透明</strong>。</p><p>当执行一条指令时，先把它从内存取到内存数据寄存器（MDR）中，然后再传送至IR。</p><h3 id="指令译码器"><a href="#指令译码器" class="headerlink" title="指令译码器"></a>指令译码器</h3><p><strong>指令译码器(Instruction Decoder,ID)</strong>是控制器中的主要部件之一。计算机能且只能执行“指令”。指令由操作码和地址码组成。操作码表示要执行的操作性质，即执行什么操作，或做什么；地址码是操作码执行时的操作对象的地址。计算机执行一条指定的指令时，必须首先分析这条指令的操作码是什么，以决定操作的性质和方法，然后才能控制计算机其他各部件协同完成指令表达的功能，这个分析工作由指令译码器来完成。</p><h3 id="MDR与MAR"><a href="#MDR与MAR" class="headerlink" title="MDR与MAR"></a>MDR与MAR</h3><p>计算机中的<strong>存储器数据寄存器(MDR)</strong>，与<strong>存储器地址寄存器(MAR)</strong>帮助完成CPU和主存储器之间的通信。</p><p><strong>MAR</strong>用来保存数据被传输到的位置的地址或者数据来源位置的<strong>地址</strong>。</p><p><strong>MDR</strong>保存要被写入地址单元或者从地址单元读出的<strong>数据</strong>。</p><p>主存与CPU的硬连接有三组连线：地址总线（AB）、数据总线（DB）和控制总线（CB）。把主存看作一个黑盒子，存储器地址寄存器（MAR）和存储器数据寄存器（MDR）是主存和CPU之间的接口。<strong>MAR</strong>可以接收由<strong>程序计数器（PC）</strong>的指令地址或来自运算器的操作数的地址，以确定要访问的单元。<strong>MDR</strong>是向主存写入数据或从主存读出数据的缓冲部件。MAR和MDR从功能上看属于主存，但通常放在CPU内。</p><h3 id="地址寄存器AR"><a href="#地址寄存器AR" class="headerlink" title="地址寄存器AR"></a>地址寄存器AR</h3><p>用来保存<strong>当前CPU所访问的内存单元</strong>的地址。</p><p>由于在内存和CPU之间存在着操作速度上的差别，所以必须使用地址寄存器来保持地址信息，直到内存的读/写操作完成为止 。</p><h3 id="算术逻辑单元ALU"><a href="#算术逻辑单元ALU" class="headerlink" title="算术逻辑单元ALU"></a>算术逻辑单元ALU</h3><p><strong>算术逻辑单元（Arithmetic&amp;logical Unit）</strong>是<strong>中央处理器(CPU)的执行单元</strong>。</p><p>是所有中央处理器的核心组成部分，由”And Gate”（与门） 和”Or Gate”（或门）构成的算术逻辑单元，主要功能是进行二位元的算术运算，如加减乘(不包括整数除法)。</p><h3 id="累加器AC"><a href="#累加器AC" class="headerlink" title="累加器AC"></a>累加器AC</h3><p>累加寄存器（AC）通常简称为<strong>累加器</strong>，它是一个<strong>通用寄存器</strong>。</p><p>其功能是：当运算器的算术逻辑单元(ALU)执行算术或逻辑运算时，为ALU提供一个工作区。累加寄存器暂时存放ALU运算的结果信息。</p><p>在运算器中，累加器是专门存放算术或逻辑运算的一个操作数和运算结果的寄存器。能进行加、减、读出、移位、循环移位和求补等操作，是运算器的主要部分。</p><h3 id="状态寄存器"><a href="#状态寄存器" class="headerlink" title="状态寄存器"></a>状态寄存器</h3><p>状态寄存器又名条件码寄存器，它是计算机系统的核心部件——运算器的一部分。</p><p>状态寄存器用来存放两类信息：一类是体现当前指令执行结果的各种状态信息（条件码），如有无进位（CF位）、有无溢出（OV位）、结果正负（SF位）、结果是否为零（ZF位）、奇偶标志位（P位）等；另一类是存放控制信息（PSW:程序状态字寄存器），如允许中断(IF位)、跟踪标志（TF位）等。</p><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>通用寄存器可用于传送和暂存数据，也可参与算术逻辑运算，并保存运算结果。除此之外，它们还各自具有一些特殊功能。</p><h3 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h3><ol><li><p>算术逻辑单元ALU</p></li><li><p>累加寄存器</p></li><li><p>数据缓冲寄存器</p></li><li><p>状态条件寄存器</p></li></ol><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><ol><li>程序计数器PC</li><li>指令寄存器IR</li><li>指令译码器</li><li>时序部件</li><li>操作控制器</li></ol>]]></content>
      
      
      <categories>
          
          <category> 备战软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成与体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20200908日常记录</title>
      <link href="/2020/09/08/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-8/"/>
      <url>/2020/09/08/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-8/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-8的日常记录"><a href="#2020-9-8的日常记录" class="headerlink" title="2020/9/8的日常记录"></a>2020/9/8的日常记录</h1><h2 id="日程记录"><a href="#日程记录" class="headerlink" title="日程记录"></a>日程记录</h2><p>快六点的时候醒，然后起床、洗漱、喝水。</p><p>6:15–6:47 背单词，2 list，用了半小时</p><p>6:50–7:30 出去散步，用时40 min</p><p>回来发呆，半小时</p><p>八点，去吃饭，半小时？</p><p>同学问题，看了一道算法题，没做</p><p>差不多十点？看软考题目，看了大约一个小时</p><p>十一点多，拿快递、买饭，回来继续做了软考题</p><p>然后吃饭、看脱口秀到十二点半吧</p><p>十二点四十七，上床看算法书，半个小时</p><p>一点半，睡觉，至两点四十多，一个多小时</p><p>差不多三点，起来看书，用时四十多分钟</p><p>同学又问题</p><p>可能四点多开始做算法题，做到五点，用时1h</p><p>五点多，吃饭，看脱口秀，找教材，至七点</p><p>？？？</p><p>八点去跑步，用时半小时</p><p>八点半洗澡，……，半小时</p><p>九点开始看算法书，两个番茄，中间休息5min复习了一下口琴曲</p><p>十点，写日记。</p><h2 id="今日反思"><a href="#今日反思" class="headerlink" title="今日反思"></a>今日反思</h2><p>今天可能做了很多事，但我还是没有找到感觉，然后我中午的时候思考了一下，我觉得可能是这几个原因：</p><ol><li>没有养成稳定的习惯，没有养成固定的时间做固定的事</li><li>不够专注，没有利用好大块时间，容易被其他东西吸引</li><li>抗拒心理和完美主义心理，或许不忍面对自己什么都不会的本质，懒于开始。</li></ol><p>所以以后需要做的是专注，及大块时间的利用，上午、下午、晚上的时间最好分为几大块来安排，不要太琐碎。</p><p>专注！专注！专注！</p><p>然后做比做好更重要，每天都要有做一件痛苦事情的经历。</p><p>气态要端正，写字要认真写。</p><h2 id="今日日记"><a href="#今日日记" class="headerlink" title="今日日记"></a>今日日记</h2><p>今天早上背单词、散步，上午看软考题，中午看算法书，下午读书、做算法题，看了一期脱口秀，还有晚上跑步、两个番茄的算法书。听起来还不错，只是听起来，还是没找到感觉，不过这是一个好的开始，虽然做的不多，但毕竟是做了这些事，后面稳定后可以慢慢增加每项事情的时间，这也可以叫“慢启动”了。</p><p>坚持做一点比偶尔做很多更重要，时间的复利作用体现在这里面。只有做了才能试错、进而才能优化。小步快跑，快速迭代。每天既有行动，又有反思，进而优化，不断的反馈。</p><p>明天要上课了，但是希望明天可以合理安排好时间，利用好大块的时间，专心投入一件事。</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录与反思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20200907日常记录</title>
      <link href="/2020/09/07/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-7/"/>
      <url>/2020/09/07/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952020-9-7/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-7的日常记录"><a href="#2020-9-7的日常记录" class="headerlink" title="2020/9/7的日常记录"></a>2020/9/7的日常记录</h1><h2 id="日程记录"><a href="#日程记录" class="headerlink" title="日程记录"></a>日程记录</h2><p>06:17 醒来，起床、洗漱、上厕所</p><p>6:34-7:10 背单词，约40 min</p><p>???-8:00  吃饭(2青菜包+黑米粥)，约半个多小时</p><p>8:00-8:30 做团日活动，发微博、拍照片之类的，约半小时</p><p>8:52-9:18 吹口琴，约半小时</p><p>???-11:20 ？+研究如何将文章发到博客上面，并写了一篇文章，未知</p><p>11:30-?? 吃饭、看脱口秀，未知</p><p>??-13:50 研究博客更换主题，寻找满意的主题，unknow</p><p>13:50-14:17 睡觉，约 20 min</p><p>14:24-?? 在床上发呆，unknow</p><p>??-?? 研究更换主题，并换了一个主题，配置相关内容，发布了关于vlan 和三层交换机的文章，unknow </p><p>16:20-17:02 做了两道算法题，二分题。约40 min</p><p>??-17:30 看上届蓝桥杯的题目，并做了2道题</p><p>17:30-19:25 吃饭、看脱口秀。</p><p>??-?? ??</p><p>跑步，约半个多小时可能。</p><p>吹口琴，约四五十分钟。</p><p>快十点洗澡</p><p>十点聊了一会儿天</p><p>十点十几写日常记录</p><h2 id="今日反思"><a href="#今日反思" class="headerlink" title="今日反思"></a>今日反思</h2><ol><li>就目前而言，较好的时间管理并不是严格记录每个具体的时间都在干什么，而是把一天分为早上、上午、中午、下午、晚上这几个阶段，然后记录每个阶段内都做了哪些事，用了多长时间，主要是记录大类时间及大致时间。记录具体时间的效果似乎不如我之前用汉字记录的效果好。</li><li>近日一直都没有认真记录时间流向，所以现在很多事件都写不出来。明天要开始留意时间流向，每天做了什么，每件事上花费了多少时间。</li><li>近日一直都比较懒，很多事都不想做，比如做软考题目、看算法书、晚上复习单词等等。然后每天也不清楚时间都开销到那里去了，所以明天要开始有意识的多做些这些必要的事。</li><li>看有趣的视频容易上瘾，看视频时要开始暗时自己，每次看视频最长连续不超过1 h，大约半个小时，假如没事的话可以多点。留意吃饭的速度及时间！</li><li>每天容易发呆或着做些不知道做了什么的事，要开始留意这些情况。我现在每天不知道时间都去哪了，没有办法合理的安排，所以开始有点焦灼。</li><li>明天分成三段的话，<ul><li>早上做的事有：背单词（2 list)、做软考题目(章节练习 30+）、做算法题（2道）。</li><li>下午做的事有：看算法书、读书</li><li>晚上做的事有：锻炼、写日记</li></ul></li></ol><h2 id="今日日记"><a href="#今日日记" class="headerlink" title="今日日记"></a>今日日记</h2><p>今天是大晴天，我早上好早就醒了，其实也不算很早，也就六点十七，不过那个时候大部分人都在睡觉。然后开始背单词，估计以后也开始每天早上背单词了。</p><p>今天我吃了早饭，两个青菜包和一个黑米粥，emmmm, 还不错。</p><p>上午弄了弄团日活动，然后就不知道该干什么，就吹口琴吧。还不错，复习了《亲爱的旅人》然后又继续练习《天空之城》，然后差不多记住了，表现的还不错，效率比在家里还高！</p><p>然后上午我还研究好了如何发布文章到博客上，我想把github博客变成一个类似笔记本的东西，然后我每天的记录、日常感想、以及技术知识都可以记录在上面，甚至以后还可以把我拍得好看的照片放上去，所以上午研究如何发布文章挺满足的。</p><p>不过我学会发文章后又对博客的主题不满意了，感觉它就是只有酷炫，很多东西都没什么用，所以我就想找个简洁点的并且比较光亮点的。所以下午很长时间我在学习更换博客主题，其实也不太难。然后就换了一个很简洁，比较满意的主题。并且今天还发了两篇文章放在了上面。</p><p>今天中午去那个新开的米饭店吃，CSY也是从那里买的，但他说不好吃，我觉得还可以，还不错。然后中午我看脱口秀第三季感觉还蛮有意思的。中午的时候没看多久，还有点自制力，到下午吃饭的时候一口气看完了，我估计看了一个多小时……</p><p>近期来一直很懒，啥也不想做，算法题也是，我就强迫自己打开做做，然后似乎找到了点感觉，轻松的做了两道简单题，然后又看了两道上次比赛的简单题。以后一定还要继续。</p><p>然后今天算法书没看、晚上单词也没复习、软考题目也没做、没有读书……这些重要的事都没做。不过今天锻炼了，昨天也锻炼了。</p><p>今天做的比较大的事就是做了算法题、然后研究了hexo博客（发布和更换主题）、然后早上背了单词还有就是每顿饭都好好的吃了饭，看了一季脱口秀。</p><p>明天一定要开始留意时间，留意大块时间都做了什么，给每件事加上时间限制。</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录与反思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vlan及三层交换的简单复习</title>
      <link href="/2020/09/07/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%A4%8D%E4%B9%A0/"/>
      <url>/2020/09/07/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-交换机的作用"><a href="#1-交换机的作用" class="headerlink" title="1.交换机的作用"></a>1.交换机的作用</h2><p>交换机工作在数据链路层，根据MAC地址进行数据的转发。</p><h2 id="2-VLAN"><a href="#2-VLAN" class="headerlink" title="2. VLAN"></a>2. VLAN</h2><h3 id="vlan-的作用"><a href="#vlan-的作用" class="headerlink" title="vlan 的作用"></a>vlan 的作用</h3><p>Virtual Local Area Network简写VLAN，即虚拟局域网。</p><p>一种将局域网（LAN）设备从<strong>逻辑</strong>上划分（注意，不是从物理上划分）成一个个网段（或者说是更小的局域网LAN），从而实现虚拟工作组（单元）的数据交换技术。</p><p>VLAN除了<strong>能将网络划分为多个广播域</strong>，从而有效地控制广播风暴的发生，以及使网络的拓扑结构变得非常灵活的优点外，还可以用于控制网络中不同部门、不同站点之间的互相访问。</p><h3 id="配置vlan-命令"><a href="#配置vlan-命令" class="headerlink" title="配置vlan 命令"></a>配置vlan 命令</h3><p>交换机 VLAN配置命令</p><pre><code>Switch(config-if)#vlan 2 name vlan2Switch(config-vlan)#interface fa0/23Switch(config-if)#switchport access vlan 2</code></pre><p>交换机配trunk</p><p>交换机之间互联的端口为串口（Trunk）</p><pre><code>Switch(config-if)#interface fa0/1Switch(config-if)#switchport mode trunk</code></pre><p>配完 vlan和 trunk后仍ping不同？</p><p>每个交换机都要配置 vlan，包括只跟交换机相连的交换机！</p><p>删除vlan</p><pre><code>Switch(config-if)#no vlan 2</code></pre><h2 id="3-三层交换"><a href="#3-三层交换" class="headerlink" title="3.三层交换"></a>3.三层交换</h2><h3 id="三层交换技术"><a href="#三层交换技术" class="headerlink" title="三层交换技术"></a>三层交换技术</h3><p>三层交换技术就是：二层交换技术+三层转发技术。</p><p>它解决了局域网中网段划分之后，网段中子网必须依赖路由器进行管理的局面，解决了传统路由器低速、复杂所造成的网络瓶颈问题。</p><h3 id="有路由器了为什么还需要三层交换机？"><a href="#有路由器了为什么还需要三层交换机？" class="headerlink" title="有路由器了为什么还需要三层交换机？"></a>有路由器了为什么还需要三层交换机？</h3><p>三层交换机就是具有部分路由器功能的交换机。</p><p>路由器的三层转发主要依靠CPU进行，而三层交换机的三层转发依靠ASIC芯片完成，这就决定了两者在转发性能上的巨大差别。</p><blockquote><p>三层交换机的最重要的功能是加快大型局域网络内部的数据的快速转发，加入路由功能也是为这个目的服务的。如果把大型网络按照部门，地域等等因素划分成一个个小局域网，这将导致大量的网际互访，单纯的使用二层交换机不能实现网际互访；如单纯的使用路由器，由于接口数量有限和路由转发速度慢，将限制网络的速度和网络规模，采用具有路由功能的快速转发的三层交换机就成为首选。</p></blockquote><p>当然，三层交换机并不能完全替代路由器，路由器所具备的丰富的接口类型、良好的流量服务等级控制、强大的路有能力等仍然是三层交换机的薄弱环节。</p><p>目前的三层交换机一般是通过VLAN来划分二层网络并实现二层交换的，同时能够实现不同VLAN间的三层IP互访。</p><p>较好的参考文献：<a href="https://baijiahao.baidu.com/s?id=1589735136955813160&wfr=spider&for=pc" target="_blank" rel="noopener">二层交换机与三层交换机区别详解</a></p><h2 id="4-三层交换机配置"><a href="#4-三层交换机配置" class="headerlink" title="4.三层交换机配置"></a>4.三层交换机配置</h2><pre><code>Switch(config-if)#ip routing  //开启三层交换功能Switch(config)#vlan 2Switch(config-vlan)#interface vlan 2Switch(config-if)#ip address 192.168.1.254 255.255.255.0</code></pre><p>配好vlan和三层交换机后，仍ping不通？</p><p>还要配置主机的网关！</p><p>注：不同vlan同一网段不知道如何实现互通，只掌握了不同vlan，不同网段互通。</p>]]></content>
      
      
      <categories>
          
          <category> 网络系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo如何发布文章到博客上</title>
      <link href="/2020/09/07/hexo%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2020/09/07/hexo%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo如何发布文章到个人博客上"><a href="#hexo如何发布文章到个人博客上" class="headerlink" title="hexo如何发布文章到个人博客上"></a>hexo如何发布文章到个人博客上</h1><blockquote><p><strong>概述</strong></p><p>探究利用hexo如何发布一篇文章。</p><p>博客搭建方式：github+hexo</p></blockquote><h2 id="发布文章大致流程"><a href="#发布文章大致流程" class="headerlink" title="发布文章大致流程"></a>发布文章大致流程</h2><p>1.在source下的_posts中创建md文件，即文章内容。</p><p>2.在博客站点下右箭，选择Git Bash Here，输入命令 <code>hexo g</code>(<code>hexo generate</code>)  生成静态文件。</p><p>3.可以输入<code>hexo s</code>（<code>hexo server</code>）进行本地预览，地址为 *<em>localhost:4000 *</em> 。</p><p>4.没有问题后，输入命令<code>hexo d</code> （<code>hexo display</code>），将本地文件发布到github仓库上。</p><h2 id="如何新建一篇文章"><a href="#如何新建一篇文章" class="headerlink" title="如何新建一篇文章"></a>如何新建一篇文章</h2><p>hexo新建一篇文章的命令为</p><pre><code class="bash">hexo new [layout] &lt;title&gt;</code></pre><p>如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，需要使用引号括起来。例如：</p><pre><code class="bash">hexo new &quot;post title with whitespace&quot;</code></pre><h2 id="新建文章中的-是干什么的"><a href="#新建文章中的-是干什么的" class="headerlink" title="新建文章中的---是干什么的"></a>新建文章中的<code>---</code>是干什么的</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre><code class="markdown">---title: Hello Worlddate: 2013/7/13 20:46:25---</code></pre><p>为文章添加分类和标签即是在此区域添加。</p><h2 id="如何给文章添加分类"><a href="#如何给文章添加分类" class="headerlink" title="如何给文章添加分类"></a>如何给文章添加分类</h2><p>前面可能部分需要自己手动添加创建“分类”选项，可参考最后的<a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener">参考链接</a>，这里没有叙述。</p><p>若想给文章添加分类只需给文章添加“categories”属性即可，如下面的例子：</p><pre><code class="markdown">---title: Hexo 添加分类及标签date: 2017-05-26 12:12:57categories: Hexo---</code></pre><p>添加好分类后，点击博客中每个分类就可以看到该分类下的所有文章（即包含categories: xxx的所有文章）。</p><p>注意事项：<strong>分类具有顺序性和层次性</strong>，hexo一篇文章只能属于一个分类，如在”- web前端“下面添加”-xxx“不会产生并列的两个分类，而是会嵌套的一个分类。</p><h2 id="如何给文章添加标签"><a href="#如何给文章添加标签" class="headerlink" title="如何给文章添加标签"></a>如何给文章添加标签</h2><p>添加标签的方法与添加分类类似，前面创建”标签“选项的内容也没有叙述，可以参考最后的<a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener">参考链接</a>。</p><p>给文章添加标签只需要在文章中添加”tag”属性，下面为添加标签的例子：</p><pre><code class="markdown">---title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: - web前端tags:- jQuery- 表格- 表单验证---</code></pre><p><strong>标签没有顺序性和层次性</strong>，即写多个标签是可以并列的，不会出现嵌套。</p><h2 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h2><ul><li>在<strong>scaffolds</strong>目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。比如我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行<code>hexo new 文章名</code>命令生成的文件，页面里就有<strong>categories:</strong>项了。</li></ul><h2 id="其他参考链接"><a href="#其他参考链接" class="headerlink" title="其他参考链接"></a>其他参考链接</h2><ul><li><p><a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener">Hexo使用攻略-添加分类及标签</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">官方hexo指令介绍</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">官方Front-matter介绍</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/19/hello-world/"/>
      <url>/2020/03/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
